import numpy as np
import matplotlib.pyplot as plt

class SupportFilesCar:
    ''' The following functions interact with the main file'''

    def __init__(self):
        m=1500
        Iz=3000
        Caf=19000
        Car=33000
        lf=2
        lr=3
        Ts=0.02

        Q=np.matrix('1 0;0 1')
        S=np.matrix('1 0;0 1')
        R=np.matrix('1')

        outputs=2
        hz = 20
        x_dot=20
        lane_width=7
        nr_lanes=5
        r=4
        f=0.01
        time_length = 10

        PID_switch=0
        Kp_yaw=7; Kd_yaw=3; Ki_yaw=5
        Kp_Y=7; Kd_Y=3; Ki_Y=5

        trajectory=3

        self.constants={'m':m, 'Iz':Iz, 'Caf':Caf, 'Car':Car, 'lf':lf, 'lr':lr,
            'Ts':Ts, 'Q':Q, 'S':S, 'R':R, 'outputs':outputs, 'hz':hz, 'x_dot':x_dot,
            'r':r, 'f':f, 'time_length':time_length, 'lane_width':lane_width,
            'PID_switch':PID_switch, 'Kp_yaw':Kp_yaw, 'Kd_yaw':Kd_yaw, 'Ki_yaw':Ki_yaw,
            'Kp_Y':Kp_Y, 'Kd_Y':Kd_Y, 'Ki_Y':Ki_Y, 'trajectory':trajectory}

    def trajectory_generator(self,t,r,f):
        Ts=self.constants['Ts']
        x_dot=self.constants['x_dot']
        trajectory=self.constants['trajectory']
        x=np.linspace(0,x_dot*t[-1],num=len(t))

        if trajectory==1:
            y=-9*np.ones(len(t))
        elif trajectory==2:
            y=9*np.tanh(t-t[-1]/2)
        elif trajectory==3:
            aaa=-28/100**2
            aaa=aaa/1.1
            if aaa<0: bbb=14
            else: bbb=-14
            y_1=aaa*(x+self.constants['lane_width']-100)**2+bbb
            y_2=2*r*np.sin(2*np.pi*f*x)
            y=(y_1+y_2)/2
        else:
            print("For trajectories, only choose 1, 2, or 3 as an integer value")
            exit()

        dx=x[1:]-x[:-1]
        dy=y[1:]-y[:-1]
        psi=np.zeros(len(x))
        psiInt=psi
        psi[0]=np.arctan2(dy[0],dx[0])
        psi[1:]=np.arctan2(dy,dx)
        dpsi=psi[1:]-psi[:-1]
        psiInt[0]=psi[0]
        for i in range(1,len(psiInt)):
            if dpsi[i-1]<-np.pi: psiInt[i]=psiInt[i-1]+(dpsi[i-1]+2*np.pi)
            elif dpsi[i-1]>np.pi: psiInt[i]=psiInt[i-1]+(dpsi[i-1]-2*np.pi)
            else: psiInt[i]=psiInt[i-1]+dpsi[i-1]
        return psiInt,x,y

    def state_space(self):
        m=self.constants['m']; Iz=self.constants['Iz']
        Caf=self.constants['Caf']; Car=self.constants['Car']
        lf=self.constants['lf']; lr=self.constants['lr']
        Ts=self.constants['Ts']; x_dot=self.constants['x_dot']

        A1=-(2*Caf+2*Car)/(m*x_dot)
        A2=-x_dot-(2*Caf*lf-2*Car*lr)/(m*x_dot)
        A3=-(2*lf*Caf-2*lr*Car)/(Iz*x_dot)
        A4=-(2*lf**2*Caf+2*lr**2*Car)/(Iz*x_dot)

        A=np.array([[A1,0,A2,0],[0,0,1,0],[A3,0,A4,0],[1,x_dot,0,0]])
        B=np.array([[2*Caf/m],[0],[2*lf*Caf/Iz],[0]])
        C=np.array([[0,1,0,0],[0,0,0,1]])
        D=0

        Ad=np.identity(np.size(A,1))+Ts*A
        Bd=Ts*B
        Cd=C; Dd=D
        return Ad,Bd,Cd,Dd

    def mpc_simplification(self,Ad,Bd,Cd,Dd,hz):
        A_aug=np.concatenate((Ad,Bd),axis=1)
        temp1=np.zeros((np.size(Bd,1),np.size(Ad,1)))
        temp2=np.identity(np.size(Bd,1))
        temp=np.concatenate((temp1,temp2),axis=1)
        A_aug=np.concatenate((A_aug,temp),axis=0)
        B_aug=np.concatenate((Bd,np.identity(np.size(Bd,1))),axis=0)
        C_aug=np.concatenate((Cd,np.zeros((np.size(Cd,0),np.size(Bd,1)))),axis=1)
        D_aug=Dd

        Q=self.constants['Q']; S=self.constants['S']; R=self.constants['R']
        CQC=np.matmul(np.transpose(C_aug),Q); CQC=np.matmul(CQC,C_aug)
        CSC=np.matmul(np.transpose(C_aug),S); CSC=np.matmul(CSC,C_aug)
        QC=np.matmul(Q,C_aug); SC=np.matmul(S,C_aug)

        Qdb=np.zeros((np.size(CQC,0)*hz,np.size(CQC,1)*hz))
        Tdb=np.zeros((np.size(QC,0)*hz,np.size(QC,1)*hz))
        Rdb=np.zeros((np.size(R,0)*hz,np.size(R,1)*hz))
        Cdb=np.zeros((np.size(B_aug,0)*hz,np.size(B_aug,1)*hz))
        Adc=np.zeros((np.size(A_aug,0)*hz,np.size(A_aug,1)))

        for i in range(hz):
            if i==hz-1:
                Qdb[np.size(CSC,0)*i:np.size(CSC,0)*(i+1),
                    np.size(CSC,1)*i:np.size(CSC,1)*(i+1)]=CSC
                Tdb[np.size(SC,0)*i:np.size(SC,0)*(i+1),
                    np.size(SC,1)*i:np.size(SC,1)*(i+1)]=SC
            else:
                Qdb[np.size(CQC,0)*i:np.size(CQC,0)*(i+1),
                    np.size(CQC,1)*i:np.size(CQC,1)*(i+1)]=CQC
                Tdb[np.size(QC,0)*i:np.size(QC,0)*(i+1),
                    np.size(QC,1)*i:np.size(QC,1)*(i+1)]=QC

            Rdb[np.size(R,0)*i:np.size(R,0)*(i+1),
                np.size(R,1)*i:np.size(R,1)*(i+1)]=R

            for j in range(hz):
                if j<=i:
                    Cdb[np.size(B_aug,0)*i:np.size(B_aug,0)*(i+1),
                         np.size(B_aug,1)*j:np.size(B_aug,1)*(j+1)] = \
                        np.matmul(np.linalg.matrix_power(A_aug,((i+1)-(j+1))),B_aug)
            Adc[np.size(A_aug,0)*i:np.size(A_aug,0)*(i+1),:] = np.linalg.matrix_power(A_aug,i+1)

        Hdb=np.matmul(np.transpose(Cdb),Qdb)
        Hdb=np.matmul(Hdb,Cdb)+Rdb
        temp=np.matmul(np.transpose(Adc),Qdb)
        temp=np.matmul(temp,Cdb)
        temp2=np.matmul(-Tdb,Cdb)
        Fdbt=np.concatenate((temp,temp2),axis=0)
        return Hdb,Fdbt,Cdb,Adc

    def open_loop_new_states(self,states,U1):
        m=self.constants['m']; Iz=self.constants['Iz']
        Caf=self.constants['Caf']; Car=self.constants['Car']
        lf=self.constants['lf']; lr=self.constants['lr']
        Ts=self.constants['Ts']; x_dot=self.constants['x_dot']

        y_dot,psi,psi_dot,Y=states
        sub_loop=30
        for i in range(sub_loop):
            y_dot_dot=-(2*Caf+2*Car)/(m*x_dot)*y_dot+(-x_dot-(2*Caf*lf-2*Car*lr)/(m*x_dot))*psi_dot+2*Caf/m*U1
            psi_dot_dot=-(2*lf*Caf-2*lr*Car)/(Iz*x_dot)*y_dot-(2*lf**2*Caf+2*lr**2*Car)/(Iz*x_dot)*psi_dot+2*lf*Caf/Iz*U1
            Y_dot=np.sin(psi)*x_dot+np.cos(psi)*y_dot
            y_dot+=y_dot_dot*Ts/sub_loop
            psi+=psi_dot*Ts/sub_loop
            psi_dot+=psi_dot_dot*Ts/sub_loop
            Y+=Y_dot*Ts/sub_loop
        return np.array([y_dot,psi,psi_dot,Y])
